@page "/password"
@using DocuRISE.Shared.Models.User;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient HttpClient
@attribute [Authorize]

<div class="container change-password-padding">
    <EditForm class="form" Model="@ChangePasswordModel" OnValidSubmit="HandlePasswordChange">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h3 class="title">Change password</h3>
        <Alert ShowAlert="@ShowErrors" ShowAlertChanged="@((bool value) => ShowErrors = value)" Messages="@Errors" AlertType="alert-danger" />
        <Alert ShowAlert="@ShowSuccess" ShowAlertChanged="@((bool value) => ShowSuccess = value)" Messages="@Success" AlertType="alert-success" />
        <div class="field">
            <div class="label-input">
                <i class="fa fa-user"></i>
                <label for="OldPassword">Password</label>
            </div>
            <InputText class="input" type="password" id="OldPassword" @bind-Value="@ChangePasswordModel.OldPassword" />
        </div>
        <div class="field">
            <div class="label-input">
                <i class="fa fa-user"></i>
                <label for="NewPassword">New Password</label>
            </div>
            <InputText class="input" type="password" id="NewPassword" @bind-Value="@ChangePasswordModel.NewPassword" />
        </div>
        <div class="field">
            <div class="label-input">
                <i class="fa fa-envelope"></i>
                <label for="ConfirmNewPassword">Confirm New Password</label>
            </div>
            <InputText class="input" type="password" id="ConfirmNewPassword" @bind-Value="@ChangePasswordModel.ConfirmNewPassword" />
        </div>
        <button type="submit" class="button">Submit</button>
    </EditForm>
</div>

@code {
    protected UserChangePasswordRequestModel ChangePasswordModel = new UserChangePasswordRequestModel();

    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private bool ShowSuccess;
    private IEnumerable<string> Success;

    private async Task HandlePasswordChange()
    {
        ShowErrors = false;
        ShowSuccess = false;

        var result = await HttpClient.PutAsJsonAsync("api/users/password", ChangePasswordModel);
        var checkResult = await result.Content.ReadFromJsonAsync<ChangePasswordResult>();

        if (checkResult.Successful)
        {
            ChangePasswordModel.OldPassword = string.Empty;
            ChangePasswordModel.NewPassword = string.Empty;
            ChangePasswordModel.ConfirmNewPassword = string.Empty;

            Success = checkResult.Success;
            ShowSuccess = true;

        }
        else
        {
            Errors = checkResult.Errors;
            ShowErrors = true;
        }
    }
}
